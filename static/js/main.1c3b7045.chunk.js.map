{"version":3,"sources":["components/Cards/Cards.js","API/api.js","components/Country/Country.js","components/Charts/Charts.js","image.png","App.js","reportWebVitals.js","index.js"],"names":["Cards","data","confirmed","deaths","recovered","lastUpdate","console","log","className","class","start","end","value","duration","separator","Date","toDateString","role","url","fetchData","country","a","changableUrl","axios","get","fetchdailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Country","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","onChange","e","target","aria-label","i","Charts","setDailyData","barChart","labels","datasets","label","title","display","text","backgroundColor","font","options","legend","lineChart","toLocaleDateString","borderColor","fill","App","fetchedData","setState","state","this","src","logo","alt","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPA+CeA,EA3CD,SAAC,GAAuD,IAAD,IAArDC,KAAQC,EAA6C,EAA7CA,UAAUC,EAAmC,EAAnCA,OAAOC,EAA4B,EAA5BA,UAAUC,EAAkB,EAAlBA,WAE/C,OADAC,QAAQC,IAAIL,GACRA,EAQA,sBAAKM,UAAU,OAAf,UACQ,sBAAKC,MAAM,kCAAX,UACI,qBAAKA,MAAM,cAAX,sBACA,sBAAKA,MAAM,YAAX,UACI,oBAAIA,MAAM,gBAAV,SAA0B,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAKT,EAAUU,MAAOC,SAAU,IAAKC,UAAU,QAC5F,mBAAGL,MAAM,YAAT,SAAsB,IAAIM,KAAMV,GAAYW,iBAC5C,2DAA6B,uBAA7B,qBAIR,sBAAKP,MAAM,kCAAX,UACI,qBAAKA,MAAM,cAAX,uBACA,sBAAKA,MAAM,YAAX,UACI,oBAAIA,MAAM,gBAAV,SAA0B,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAKP,EAAUQ,MAAOC,SAAU,IAAKC,UAAU,QAC5F,mBAAGL,MAAM,YAAT,SAAsB,IAAIM,KAAMV,GAAYW,iBAC5C,6DAA+B,uBAA/B,qBAIR,sBAAKP,MAAM,iCAAX,UACI,qBAAKA,MAAM,eAAX,oBACA,sBAAKA,MAAM,YAAX,UACI,oBAAIA,MAAM,gBAAV,SAA0B,cAAC,IAAD,CAASC,MAAO,EAAGC,IAAKR,EAAOS,MAAOC,SAAU,IAAKC,UAAU,QACzF,mBAAGL,MAAM,YAAT,SAAsB,IAAIM,KAAMV,GAAYW,iBAC5C,uDAAyB,uBAAzB,wBA/BR,qBAAKP,MAAM,cAAX,SACR,qBAAKA,MAAM,8BAA8BQ,KAAK,SAA9C,SACE,sBAAMR,MAAM,kBAAZ,6B,yBCPJS,EAAM,iCAECC,EAAS,uCAAE,WAAOC,GAAP,2BAAAC,EAAA,6DAChBC,EAAeJ,EAChBE,IACCE,EAAY,UAAMJ,EAAN,sBAAuBE,IAHnB,kBAM8CG,IAAMC,IAAIF,GANxD,2BAMZrB,KAAQC,EANI,EAMJA,UAAUE,EANN,EAMMA,UAAWD,EANjB,EAMiBA,OAAOE,EANxB,EAMwBA,WANxB,kBAOZ,CAACH,YAAUE,YAAWD,SAAOE,eAPjB,kCASnBC,QAAQC,IAAR,MATmB,0DAAF,sDAcTkB,EAAc,uCAAG,gCAAAJ,EAAA,+EAEDE,IAAMC,IAAN,UAAaN,EAAb,WAFC,uBAEfjB,EAFe,EAEfA,KAEDyB,EAAezB,EAAK0B,KAAI,SAACC,GAAD,MAAe,CACzC1B,UAAY0B,EAAU1B,UAAU2B,MAChC1B,OAASyB,EAAUzB,OAAO0B,MAC1BC,KAAOF,EAAUG,eAPC,kBAUfL,GAVe,yFAAH,qDAoBdM,EAAc,uCAAG,8BAAAX,EAAA,+EAEUE,IAAMC,IAAN,UAAaN,EAAb,eAFV,uBAETe,EAFS,EAEfhC,KAAMgC,UAFS,kBAGfA,EAAUN,KAAK,SAACP,GAAD,OAAaA,EAAQc,SAHrB,gCAKtB5B,QAAQC,IAAR,MALsB,yDAAH,qDCZZ4B,EAvBC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBACf,EAAgDC,mBAAS,IAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KAOA,OANAC,qBAAW,YACO,uCAAG,sBAAAnB,EAAA,kEACjBkB,EADiB,SACSP,IADT,6EAAH,qDAGdS,KACE,CAACF,IAEH,sBAAK/B,UAAU,UAAf,UACK,uDACA,sBAAMA,UAAU,SAAhB,SACA,yBAAQA,UAAU,SAAUkC,SAAW,SAACC,GAAD,OAAOP,EAAoBO,EAAEC,OAAOhC,QAAQiC,aAAW,yBAA9F,UACA,wBAAQjC,MAAM,GAAd,oBACA0B,EAAiBX,KAAI,SAACP,EAAS0B,GAAV,OAAgB,yBAAgBlC,MAAOQ,EAAvB,UAAiCA,EAAjC,MAAa0B,e,QCwDhDC,EAnEE,SAAC,GAAsD,IAAD,IAApD9C,KAAQC,EAA4C,EAA5CA,UAAUC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,UAAYgB,EAAc,EAAdA,QACrDd,QAAQC,IAAIH,GACZ,MAAiCiC,mBAAS,IAA1C,mBAAOT,EAAP,KAAiBoB,EAAjB,KACAR,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEACb2B,EADa,SACMvB,IADN,6EAAH,qDAIdgB,KACF,IAEF,IAAMQ,EACF/C,EACE,cAAC,IAAD,CACED,KAAM,CACJiD,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPC,MAAO,CAAEC,SAAS,EAAMC,KAAK,oBAAD,OAAsBnC,IAClDoC,gBAAiB,CAAC,uBAAwB,uBAAwB,WAClEvD,KAAM,CAACC,EAAUU,MAAOR,EAAUQ,MAAOT,EAAOS,OAChD6C,KAAM,SAIZC,QAAS,CACPC,OAAQ,CAAEL,SAAS,GACnBD,MAAO,CAAEC,SAAS,EAAMC,KAAK,oBAAD,OAAsBnC,OAGpD,KAGAwC,EACJhC,EAAU,GACR,cAAC,IAAD,CACE3B,KAAM,CACJiD,OAAQtB,EAAUD,KAAI,gBAAGG,EAAH,EAAGA,KAAH,OAAc,IAAIf,KAAKe,GAAM+B,wBACnDV,SAAU,CAAC,CACTlD,KAAM2B,EAAUD,KAAI,SAAC1B,GAAD,OAAUA,EAAKC,aACnCkD,MAAO,WACPU,YAAa,UACbC,MAAM,GACL,CACD9D,KAAM2B,EAAUD,KAAI,SAAC1B,GAAD,OAAUA,EAAKE,UACnCiD,MAAO,SACPU,YAAa,MACbN,gBAAiB,uBACjBO,MAAM,OAKV,KAGR,OACI,qBAAKvD,UAAU,YAAf,SACIY,EAAU6B,EAAWW,KCjElB,MAA0B,kCCuD1BI,E,kDAxCb,aAAc,IAAD,8BACX,gBAeF5B,oBAhBa,uCAgBS,WAAOhB,GAAP,eAAAC,EAAA,sEACKF,EAAUC,GADf,OACd6C,EADc,OAEpB,EAAKC,SAAS,CAACjE,KAAOgE,EAAa7C,QAASA,IAC5Cd,QAAQC,IAAI0D,GAHQ,2CAhBT,sDAET,EAAKE,MAAM,CACTlE,KAAM,GACNmB,QAAU,IAJH,E,4FAQb,4BAAAC,EAAA,sEAC2BF,IAD3B,OACQ8C,EADR,OAEE3D,QAAQC,IAAI6D,KAAKnE,MACjBmE,KAAKF,SAAS,CAACjE,KAAOgE,IAHxB,gD,0EAeA,WACE,MAAyBG,KAAKD,MAAtBlE,EAAR,EAAQA,KAAKmB,EAAb,EAAaA,QACb,OAEE,sBAAKZ,UAAU,SAAf,UAEE,qBAAK6D,IAAKC,EAAM9D,UAAU,QAAQ+D,IAAI,YACtC,cAAC,EAAD,CAAQtE,KAAMA,IACd,cAAC,EAAD,CAAUmC,oBAAqBgC,KAAKhC,sBACnC,cAAC,EAAD,CAASnC,KAAMA,EAAMmB,QAASA,W,GAjCrBoD,aCFHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1c3b7045.chunk.js","sourcesContent":["import React from 'react';\r\nimport CountUp from 'react-countup';\r\nimport './Cards.css';\r\n\r\nconst Cards = ({data : {confirmed,deaths,recovered,lastUpdate}}) =>  {\r\n    console.log(confirmed);\r\n    if(!confirmed){\r\n        return (<div class=\"text-center\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n          <span class=\"visually-hidden\">Loading...</span>\r\n        </div>\r\n      </div>)\r\n    }\r\n    return (\r\n        <div className=\"mb-5\">\r\n                <div class=\"card text-white bg-primary mb-3\">\r\n                    <div class=\"card-header\">Infected</div>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title f2\"><CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" /></h5>\r\n                        <p class=\"card-text\">{new Date (lastUpdate).toDateString()}</p>\r\n                        <p>Number of active cases of <br></br> COVID-19</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"card text-white bg-success mb-3\" >\r\n                    <div class=\"card-header\">Recovered</div>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title f2\"><CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" /></h5>\r\n                        <p class=\"card-text\">{new Date (lastUpdate).toDateString()}</p>\r\n                        <p>Number of recovered cases of<br></br> COVID-19</p>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"card text-white bg-danger mb-3\" >\r\n                    <div class=\"card-header \">Deaths</div>\r\n                    <div class=\"card-body\">\r\n                        <h5 class=\"card-title f2\"><CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" /></h5>\r\n                        <p class=\"card-text\">{new Date (lastUpdate).toDateString()}</p>\r\n                        <p>Number of deaths from <br></br> COVID-19</p>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData =async (country) => {\r\n    let changableUrl = url;\r\n    if(country){\r\n        changableUrl = `${url}/countries/${country}`\r\n    }\r\n try{\r\n     const {data : {confirmed,recovered ,deaths,lastUpdate }} = await axios.get(changableUrl);\r\n     return {confirmed,recovered ,deaths,lastUpdate }\r\n }catch(error){\r\n     console.log(error);\r\n }\r\n}\r\n\r\n\r\nexport const fetchdailyData = async() => {\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        // console.log(data);\r\n        const modifiedData = data.map((dailyData) =>({\r\n            confirmed : dailyData.confirmed.total,\r\n            deaths : dailyData.deaths.total,\r\n            date : dailyData.reportDate\r\n\r\n        }) )\r\n        return modifiedData;\r\n\r\n    }catch(error) {\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n// t0 fetch countries\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data:{countries}} =await axios.get(`${url}/countries`);\r\n        return countries.map ((country) => country.name);\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {fetchCountries} from '../../API/api';\r\n\r\nconst Country = ( {handleCountryChange}) =>  {\r\n    const [fetchedCountries, setFetchedCountries] = useState([])\r\n    useEffect (() => {\r\n        const fetchAPI = async () =>{\r\n        setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI(); \r\n        },[setFetchedCountries])\r\n    return (\r\n        <div className=\"country\">\r\n             <label>Select a Country  </label>\r\n             <span className=\"select\">\r\n             <select className=\"select\"  onChange= {(e) => handleCountryChange(e.target.value)} aria-label=\"Default select example\">\r\n             <option value=\"\">Global</option>\r\n            {fetchedCountries.map((country ,i) => <option key={i} value={country}>{country} </option>)}\r\n            </select>\r\n             </span>\r\n             \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Country;","import React,{useState,useEffect} from 'react';\r\nimport {fetchdailyData} from '../../API/api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n// import { Doughnut } from 'react-chartjs-2';\r\n\r\n\r\nconst  Charts =  ({data : {confirmed,deaths, recovered}, country}) =>  {\r\n    console.log(recovered);\r\n    const [dailyData,setDailyData] = useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchdailyData());\r\n        }\r\n        // console.log(dailyData);\r\n        fetchAPI();\r\n    },[])\r\n    \r\n    const barChart = (\r\n        confirmed ? (\r\n          <Bar\r\n            data={{\r\n              labels: ['Infected', 'Recovered', 'Deaths'],\r\n              datasets: [\r\n                {\r\n                  label: 'People',\r\n                  title: { display: true, text: `Current state in ${country}` },\r\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', '#e60d0d'],\r\n                  data: [confirmed.value, recovered.value, deaths.value],\r\n                  font: '5px'\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${country}` },\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n    \r\n      const lineChart = (\r\n        dailyData[0] ? (\r\n          <Line\r\n            data={{\r\n              labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n              datasets: [{\r\n                data: dailyData.map((data) => data.confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n              }, {\r\n                data: dailyData.map((data) => data.deaths),\r\n                label: 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                fill: true,\r\n              }\r\n              ],\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n           {country ? barChart : lineChart} \r\n           {/* {barChart } */}\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Charts;","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import './App.css';\nimport React, { Component } from 'react'\nimport Cards from './components/Cards/Cards';\nimport Country from './components/Country/Country';\nimport Charts from'./components/Charts/Charts';\nimport {fetchData} from './API/api';\nimport logo from './image.png';\n\n\n\n\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n      this.state={\n        data: {},\n        country : \"\"\n      }\n    \n  }\n  async componentDidMount(){ \n    const fetchedData =await fetchData();\n    console.log(this.data);\n    this.setState({data : fetchedData});\n  }\n  \n\n\n  handleCountryChange = async (country) => {\n    const fetchedData =await fetchData(country);\n    this.setState({data : fetchedData, country: country});\n    console.log(fetchedData);\n   \n  }\n\n  render() {\n    const { data,country } = this.state;\n    return (\n      \n      <div className=\"tc App\"> \n      \n        <img src={logo} className=\"image\" alt=\"covid19\"/>\n        <Cards  data={data}/>\n        <Country  handleCountryChange={this.handleCountryChange}/>\n         <Charts  data={data} country={country}/>\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}